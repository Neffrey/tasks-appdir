// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    type              String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String

    @@index([userId])
}

enum Role {
    ADMIN
    USER
    RESTRICTED
}

model User {
    id              String          @id @default(cuid())
    name            String?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    email           String?         @unique
    emailVerified   DateTime?
    image           String?
    role            Role            @default(USER)
    accounts        Account[]
    sessions        Session[]
    Tasks           Task[]
    CompletedTasks  CompletedTask[]
    streakStartDate DateTime?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Task Models
model Task {
    id               String          @id @default(cuid())
    title            String
    timesToComplete Int?            @default(1)
    comment          String?
    timeframe        TaskTimeframe?  @default(DAY)
    owner            User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId          String
    CompletedTasks   CompletedTask[]

    @@index([ownerId])
}

enum TaskTimeframe {
    DAY
    WEEK
    FORTNIGHT
    MONTH
}

model CompletedTask {
    id               String   @id @default(cuid())
    amountToComplete Int?     @default(1)
    comment          String?
    date             DateTime
    task             Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId           String
    owner            User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId          String

    @@index([taskId])
    @@index([ownerId])
}
